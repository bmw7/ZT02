<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/cache   
           http://www.springframework.org/schema/cache/spring-cache.xsd">
           
           
    <context:property-placeholder location="classpath*:/project.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />
           
    <context:annotation-config/>  <!-- 启用注解方式 -->
    
    <context:component-scan base-package="com.mavict">  <!-- 启用自动扫描 -->
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>         
    
    <aop:aspectj-autoproxy expose-proxy="true"/>   
    <!--  <tx:annotation-driven proxy-target-class="true"/> -->

    <bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
 	 	<property name="driverClass" value="${jdbc.driver}"/>
 	 	<property name="jdbcUrl" value="${jdbc.url}"/>
  	 	<property name="user" value="${jdbc.username}"/>
  	 	<property name="password" value="${jdbc.password}"/>
  	 	
        <property name="initialPoolSize" value="${connection_pools.initial_pool_size}" /><!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="minPoolSize" value="${connection_pools.min_pool_size}" /><!--连接池中保留的最小连接数。-->
        <property name="maxPoolSize" value="${connection_pools.max_pool_size}" /><!--连接池中保留的最大连接数。Default: 15 --> 
        <property name="maxIdleTime" value="${connection_pools.max_idle_time}" /><!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="acquireIncrement" value="${connection_pools.acquire_increment}" /><!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="checkoutTimeout" value="${connection_pools.checkout_timeout}" />
        
        <property name="maxStatements" value="0" /><!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="idleConnectionTestPeriod" value="60" /><!--每60秒检查所有连接池中的空闲连接。Default: 0 --> 
        <property name="acquireRetryAttempts" value="30" /><!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --> 
        <property name="breakAfterAcquireFailure" value="true" /><!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="testConnectionOnCheckout"  value="false" /><!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false -->
        
	</bean>  
    
    <!-- 配置hiberante sessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
    
    	<property name="dataSource" ref="myDataSource" /> <!-- 将datasource注入 -->
    	<property name="packagesToScan">   <!-- 扫描需要实体映射的类的所在包-->
    		<list>
    			<value>*.*</value>
    		</list>
        </property>
  
  		<property name="hibernateProperties"> <!-- 如名，此处是将hibernate的一些属性放过来 -->
  		<props>
      		<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
      		<prop key="hibernate.show_sql">true</prop>
      		<prop key="hibernate.hbm2ddl.auto">update</prop>
            
      		<!-- 使用getCurrentSession必用设置 -->
      		<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
      
      		<!-- 配置EHcache缓存 欲加缓存的类上加 @Cacheable @Cache(usage = CacheConcurrencyStrategy.READ_ONLY) -->
      		<prop key="hibernate.cache.use_second_level_cache">true</prop>
      		<prop key="hibernate.cache.use_query_cache">true</prop>
      		<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop><!-- hibernate4专用 -->
  			
  			<!-- 这两项对hibernate性能非常重要！将严重影响Hibernate的CRUD性能 //貌似对mysql无用-->
  			<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
			<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
  		</props>
  		</property>
  		
	</bean>  
	
	<cache:annotation-driven cache-manager="cacheManager" />
	
    <!-- 配置EHcache  -->
 	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:/ehcache.xml" />
		<property name="shared" value="true" /> 
	</bean>
	
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManager" /> 
    </bean>
    
        
    <!-- 配置solr -->
    <bean id="solrServerCore0" class="org.apache.solr.client.solrj.impl.HttpSolrServer">
		<constructor-arg index="0" value="${solr.server.core0}"/>
	</bean>
	
	<bean id="solrServerCore1" class="org.apache.solr.client.solrj.impl.HttpSolrServer">
		<constructor-arg index="0" value="${solr.server.core1}"/>
	</bean>
   
    <bean id="document" class="org.apache.solr.common.SolrInputDocument" />
    
    <!-- 支持缓存注解 -->  
    <cache:annotation-driven cache-manager="cacheManager" />  
        
          
	<!-- 配置事务管理器  -->
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"> <!--其实这是一个切面类 跨数据库的话就要用jta的事务管理了 -->
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	  
	<!-- 配置事务管通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
		    <tx:method name="save*Service"    propagation="REQUIRED" />
			<tx:method name="delete*Service"  propagation="REQUIRED" />
		    <tx:method name="update*Service"  propagation="REQUIRED" />
		    <tx:method name="get*Service"     propagation="REQUIRED" read-only="true" />
		    <tx:method name="do*Service"      propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 以xml的方式配置事务  新加包 大坑一定要注意-->
	<aop:config>
		<aop:pointcut expression="(execution(* com.mavict..*.*(..)))" id="businessService"/> <!-- 这里很重要,否则极易无session -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="businessService"/>
	</aop:config>


    <!-- 配置freemarker-->
    <bean id="freeMarkerConfigurer"  class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> 
        <property name="templateLoaderPath" value="${template.loader_path}" />  <!-- 注意，这个地方配置一个即可，配置两个即失效 -->
        <property name="freemarkerSettings">  
            <props>  
                <prop key="template_update_delay">0</prop>  
                <prop key="default_encoding">UTF-8</prop>  
                <prop key="number_format">0.##########</prop>  
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
                <prop key="classic_compatible">true</prop>  
                <prop key="template_exception_handler">ignore</prop>  
                <prop key="locale">${locale}</prop>
            </props>  
        </property>  
        <property name="freemarkerVariables">                                   <!-- 从project.properties配置文件中读取 -->
			<map>
				<entry key="message" value-ref="messageMethod" />               <!-- cfg.setSharedVariable("messageMethod",xxxxxxxxx); -->
				<entry key="base"    value="#{servletContext.contextPath}" />      <!-- 获取项目的URL -->
				<entry key="locale"  value="${locale}" />
				<entry key="setting" value="#{T(com.mavict.setting.SettingUtils).get()}" /> <!-- 需要替换 -->
				<entry key="page"    value-ref="pageDirective" />
				<entry key="logo"    value-ref="logoDirective" />
				<entry key="articleThumbnail" value-ref="articleThumbnailDirective" />
				<entry key="articleFirstThumbnail" value-ref="articleFirstThumbnailDirective" />
				<entry key="articleImages" value-ref="articleImagesDirective" />
				<entry key="subTitle" value-ref="subTitleDirective" />
			</map>
		</property>
    </bean>  
    
   <!-- springmvc国际化 (与freemarker结合)-->                                             <!-- 此处注意，不可用reload那个类 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="cacheSeconds" value="${message.cache_seconds}" />
		<property name="useCodeAsDefaultMessage" value="true" />
		<property name="basenames">
			<list>
				<value>${message.client_path}</value>
				<value>${message.admin_path}</value>
			</list>
		</property>
	</bean>

	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.FixedLocaleResolver">
		<property name="defaultLocale" value="zh_CN" />
	</bean>
	
	<!-- Redis/Jedis -->
	<!--
	连接池参数maxIdle、maxActive和maxWait
	
	Redis和Tomcat连接池都涉及到以下几个参数：
	
	maxIdle，最大空闲数，数据库连接的最大空闲时间。超过空闲时间，数据库连接将被标记为不可用，然后被释放。设为0表示无限制。
	MaxActive，连接池的最大数据库连接数。设为0表示无限制。
	maxWait ，最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
	
	*maxActive:最大连接数据库连接数,设 0 为没有限制 
	*maxIdle:最大等待连接中的数量,设 0 为没有限制 
	*maxWait:最大等待毫秒数, 单位为 ms, 超过时间会出错误信息
	-->
	
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="usePool" value="true"></property>
        <property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
        <!-- <property name="password" value="${redis.pass}" />  -->
        <property name="timeout" value="${redis.timeout}" />
        <property name="database" value="${redis.default.db}"></property>
        <constructor-arg index="0" ref="jedisPoolConfig" />
    </bean>

    <!-- jedis pool配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxActive}" />
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <!--
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        -->
    </bean>

    <!-- Redis Template -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
    </bean>
	
	
</beans>